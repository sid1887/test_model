# Simple Cumpair Docker Startup Script
# Uses the secure secrets generated by setup-cumpair-security.ps1

param(
    [string]$Profile = "basic",  # basic, worker, scraping, monitoring, production
    [switch]$Build = $false,
    [switch]$Fresh = $false,
    [switch]$Logs = $false
)

Write-Host "Starting Cumpair with Secure Docker Configuration" -ForegroundColor Green
Write-Host "Profile: $Profile | Build: $Build | Fresh: $Fresh" -ForegroundColor Gray
Write-Host "=" * 60

# Check if secrets exist
$requiredSecrets = @("db_password.txt", "secret_key.txt", "redis_password.txt")
$missingSecrets = @()

foreach ($secret in $requiredSecrets) {
    if (-not (Test-Path "secrets\$secret")) {
        $missingSecrets += $secret
    }
}

if ($missingSecrets.Count -gt 0) {
    Write-Host "[ERROR] Missing secrets: $($missingSecrets -join ', ')" -ForegroundColor Red
    Write-Host "Run: .\setup-cumpair-security.ps1" -ForegroundColor Yellow
    exit 1
}

Write-Host "[SUCCESS] All required secrets found" -ForegroundColor Green

# Check Docker
try {
    docker version | Out-Null
    Write-Host "[SUCCESS] Docker is available" -ForegroundColor Green
} catch {
    Write-Host "[ERROR] Docker not available" -ForegroundColor Red
    exit 1
}

# Fresh start cleanup
if ($Fresh) {
    Write-Host "Cleaning up existing containers..." -ForegroundColor Blue
    docker-compose -f docker-compose.secure.yml down --remove-orphans 2>$null
    docker-compose -f docker-compose.secure.yml down -v 2>$null
}

# Build if requested
if ($Build) {
    Write-Host "Building Docker images..." -ForegroundColor Blue
    docker-compose -f docker-compose.secure.yml build
}

# Start services based on profile
Write-Host "Starting Cumpair services (Profile: $Profile)..." -ForegroundColor Blue

$composeArgs = @("-f", "docker-compose.secure.yml", "up", "-d")

switch ($Profile.ToLower()) {
    "basic" {
        # Just core services
        Write-Host "   Starting core services: web, postgres, redis" -ForegroundColor Cyan
    }
    "worker" {
        $composeArgs += "--profile"
        $composeArgs += "worker"
        Write-Host "   Starting with background workers" -ForegroundColor Cyan
    }
    "scraping" {
        $composeArgs += "--profile"
        $composeArgs += "scraping"
        Write-Host "   Starting with scraping services" -ForegroundColor Cyan
    }
    "monitoring" {
        $composeArgs += "--profile"
        $composeArgs += "monitoring"
        Write-Host "   Starting with monitoring stack" -ForegroundColor Cyan
    }
    "production" {
        $composeArgs += "--profile"
        $composeArgs += "production"
        Write-Host "   Starting full production setup" -ForegroundColor Cyan
    }
}

# Execute docker-compose
try {
    & docker-compose @composeArgs
    Write-Host "[SUCCESS] Services started successfully" -ForegroundColor Green
} catch {
    Write-Host "[ERROR] Failed to start services" -ForegroundColor Red
    exit 1
}

# Wait for services
Write-Host "Waiting for services to be ready..." -ForegroundColor Blue
Start-Sleep 10

# Check service status
Write-Host "Service Status:" -ForegroundColor Cyan
docker-compose -f docker-compose.secure.yml ps

# Show URLs
Write-Host "Application URLs:" -ForegroundColor Cyan
Write-Host "   • Main API: http://localhost:8000" -ForegroundColor Gray
Write-Host "   • API Docs: http://localhost:8000/docs" -ForegroundColor Gray
Write-Host "   • Health: http://localhost:8000/health" -ForegroundColor Gray

if ($Profile -eq "monitoring") {
    Write-Host "   • Grafana: http://localhost:3000 (admin/[check secrets])" -ForegroundColor Gray
    Write-Host "   • Prometheus: http://localhost:9090" -ForegroundColor Gray
}

Write-Host "Cumpair started successfully!" -ForegroundColor Green

if ($Logs) {
    Write-Host "Following logs (Ctrl+C to exit)..." -ForegroundColor Blue
    docker-compose -f docker-compose.secure.yml logs -f
}
