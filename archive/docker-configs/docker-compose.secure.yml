version: '3.8'

# Docker secrets for sensitive data
secrets:
  db_password:
    file: ./secrets/database_password.txt
  secret_key:
    file: ./secrets/secret_key.txt
  redis_password:
    file: ./secrets/redis_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

services:
  # Redis for Celery broker and caching
  redis:
    image: redis:7-alpine
    command: >
      sh -c "redis-server --appendonly yes 
             --requirepass $$(cat /run/secrets/redis_password)"
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$$(cat /run/secrets/redis_password)", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - cumpair-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-compair}
      POSTGRES_USER: ${POSTGRES_USER:-compair}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    secrets:
      - db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-compair}"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - cumpair-network

  # Main FastAPI web application
  web:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        BUILDPLATFORM: ${BUILDPLATFORM:-linux/amd64}
        TARGETPLATFORM: ${TARGETPLATFORM:-linux/amd64}
    ports:
      - "${WEB_PORT:-8000}:8000"
    environment:
      # Database configuration (use secrets)
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-compair}
      - POSTGRES_USER=${POSTGRES_USER:-compair}
      # Redis configuration (use secrets)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # Application settings
      - APP_NAME=${APP_NAME:-Cumpair}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
      # AI Model settings
      - MODELS_DIR=/app/models
      - CLIP_MODEL_NAME=${CLIP_MODEL_NAME:-ViT-B/32}
      # Security settings (secrets handled via mounted files)
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - DATABASE_PASSWORD_FILE=/run/secrets/db_password
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      # Scraping settings
      - SCRAPER_SERVICE_URL=http://scraper:3001
      - PROXY_SERVICE_URL=http://proxy-manager:8001
      - CAPTCHA_SERVICE_URL=http://captcha-service:9001
      # Docker mode
      - CUMPAIR_DOCKER_MODE=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
      - models_data:/app/models
      - logs_data:/app/logs
    secrets:
      - db_password
      - secret_key
      - redis_password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - cumpair-network

  # Celery worker for background tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile.production
    command: celery -A app.worker worker --loglevel=${CELERY_LOG_LEVEL:-info} --concurrency=${CELERY_CONCURRENCY:-2}
    environment:
      # Same environment as web service
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-compair}
      - POSTGRES_USER=${POSTGRES_USER:-compair}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - DATABASE_PASSWORD_FILE=/run/secrets/db_password
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - CUMPAIR_DOCKER_MODE=true
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - web
      - redis
      - postgres
    volumes:
      - uploads_data:/app/uploads
      - models_data:/app/models
      - logs_data:/app/logs
    secrets:
      - db_password
      - secret_key
      - redis_password
    restart: unless-stopped
    networks:
      - cumpair-network
    profiles:
      - worker

  # Celery Flower monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.production
    command: celery -A app.worker flower --port=5555 --url_prefix=flower
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-compair}
      - POSTGRES_USER=${POSTGRES_USER:-compair}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - DATABASE_PASSWORD_FILE=/run/secrets/db_password
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - CUMPAIR_DOCKER_MODE=true
    depends_on:
      - worker
    volumes:
      - logs_data:/app/logs
    secrets:
      - db_password
      - secret_key
      - redis_password
    restart: unless-stopped
    networks:
      - cumpair-network
    profiles:
      - worker

  # Proxy Management Service
  proxy-manager:
    build:
      context: ./proxy-service
    ports:
      - "${PROXY_MANAGER_PORT:-8001}:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - HAPROXY_STATS_URL=http://haproxy:8081/stats
      - PROXY_HEALTH_CHECK_INTERVAL=${PROXY_HEALTH_CHECK_INTERVAL:-60}
      - FREE_PROXY_SOURCES=${FREE_PROXY_SOURCES:-true}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - proxy_data:/app/data
    secrets:
      - redis_password
    restart: unless-stopped
    networks:
      - cumpair-network
    profiles:
      - scraping

  # HAProxy Load Balancer for Proxies
  haproxy:
    image: haproxy:2.8
    ports:
      - "${HAPROXY_PORT:-8080}:8080"
      - "${HAPROXY_STATS_PORT:-8081}:8081"
    volumes:
      - ./proxy-service/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    restart: unless-stopped
    networks:
      - cumpair-network
    profiles:
      - scraping

  # CAPTCHA Solving Service
  captcha-service:
    build:
      context: ./captcha-service
    ports:
      - "${CAPTCHA_SERVICE_PORT:-9001}:9001"
    environment:
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - captcha_data:/app/data
    secrets:
      - redis_password
    restart: unless-stopped
    networks:
      - cumpair-network
    profiles:
      - scraping

  # Nginx reverse proxy and static file server
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_data:/usr/share/nginx/html/static
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - cumpair-network
    profiles:
      - production

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - cumpair-network
    profiles:
      - monitoring

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    secrets:
      - grafana_password
    restart: unless-stopped
    networks:
      - cumpair-network
    profiles:
      - monitoring

# Named volumes for persistent data
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  models_data:
    driver: local
  logs_data:
    driver: local
  proxy_data:
    driver: local
  captcha_data:
    driver: local
  static_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network for service communication
networks:
  cumpair-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
