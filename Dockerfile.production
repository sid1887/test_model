# Multi-stage Dockerfile following testdriven.io best practices
# Stage 1: Build dependencies and compile wheels
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILDPLATFORM
ARG TARGETPLATFORM

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    libxml2-dev \
    libxslt1-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libatlas-base-dev \
    gfortran \
    git \
    wget \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install wheel
RUN pip install --upgrade pip wheel setuptools

# Copy requirements
COPY requirements.txt /tmp/requirements.txt

# Install Python dependencies and create wheels
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# Install Playwright and browsers in builder stage
RUN playwright install chromium

# Stage 2: Production image
FROM python:3.11-slim as production

# Set labels for better maintenance
LABEL maintainer="Cumpair Team"
LABEL version="1.0.0"
LABEL description="Cumpair AI-powered product analysis & price comparison system"

# Create non-root user for security
RUN groupadd -r cumpair && useradd -r -g cumpair cumpair

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    # Essential libraries for AI/ML
    libpq5 \
    tesseract-ocr \
    tesseract-ocr-eng \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender1 \
    libgomp1 \
    libgl1-mesa-glx \
    libgtk-3-0 \
    libgconf-2-4 \
    libx11-xcb1 \
    libxcb-dri3-0 \
    libxtst6 \
    libxrandr2 \
    libasound2 \
    libpangocairo-1.0-0 \
    libatk1.0-0 \
    libcairo-gobject2 \
    libgtk-3-0 \
    libgdk-pixbuf2.0-0 \
    # Image processing libraries
    libjpeg62-turbo \
    libpng16-16 \
    libtiff5 \
    # Network utilities
    curl \
    wget \
    # Clean up
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy Playwright browsers from builder
COPY --from=builder /root/.cache/ms-playwright /home/cumpair/.cache/ms-playwright

# Set working directory
WORKDIR /app

# Create necessary directories with proper permissions
RUN mkdir -p /app/uploads /app/models /app/static /app/logs \
    && chown -R cumpair:cumpair /app

# Copy application code
COPY --chown=cumpair:cumpair . .

# Create models directory structure
RUN mkdir -p /app/models/clip_cache \
    && chown -R cumpair:cumpair /app/models

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV CUMPAIR_DOCKER_MODE=true
ENV PLAYWRIGHT_BROWSERS_PATH=/home/cumpair/.cache/ms-playwright

# Switch to non-root user
USER cumpair

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health || exit 1

# Expose port
EXPOSE 8000

# Use exec form for better signal handling
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]
